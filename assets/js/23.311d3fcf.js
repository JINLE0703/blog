(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{378:function(s,t,a){"use strict";a.r(t);var n=a(25),v=Object(n.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h2",{attrs:{id:"浏览器进程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#浏览器进程"}},[s._v("#")]),s._v(" 浏览器进程")]),s._v(" "),a("ul",[a("li",[s._v("浏览器进程 --- 主要负责用户交互、子进程管理和文件储存等功能")]),s._v(" "),a("li",[s._v("网络进程 --- 是面向渲染进程和浏览器进程等提供网络下载功能")]),s._v(" "),a("li",[s._v("渲染进程 --- 主要职责是把从网络下载的 HTML、JavaScript、CSS、图片等资源解析为可以显示和交互的页面。因为渲染进程所有的内容都是通过网络获取的，会存在一些恶意代码利用浏览器漏洞对系统进行攻击，所以运行在渲染进程里面的代码是不被信任的。所以 Chrome 会让渲染进程运行在安全沙箱里，为了保证系统的安全")]),s._v(" "),a("li",[s._v("GPU 进程 --- 绘制 UI 界面")]),s._v(" "),a("li",[s._v("插件进程 --- 主要是负责插件的运行，因插件易崩溃，所以需要通过插件进程来隔离，以保证插件进程崩溃不会对浏览器和页面造成影响")])]),s._v(" "),a("h2",{attrs:{id:"导航流程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#导航流程"}},[s._v("#")]),s._v(" 导航流程")]),s._v(" "),a("p",[s._v("用户发出 URL 请求到页面开始解析的这个过程")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://raw.githubusercontent.com/jinle0703/img-host/master/blog/%E8%BE%93%E5%85%A5URL%E6%B5%81%E7%A8%8B%E5%9B%BE.png",alt:"导航流程图"}})]),s._v(" "),a("ol",[a("li",[s._v("用户地址栏输入\n"),a("ol",[a("li",[s._v("输入关键字搜索内容，地址栏会使用浏览器默认的搜索引擎，来合成新的带搜索关键字的 URL")]),s._v(" "),a("li",[s._v("输入内容符合 URL 规则，地址栏会根据规则，把这段内容加上协议，合成为完整的 URL")])])]),s._v(" "),a("li",[s._v("URL 请求过程\n"),a("ol",[a("li",[s._v("浏览器进程通过进程间通信把 URL 请求发送至网络进程")]),s._v(" "),a("li",[s._v("网络进程会查找本地缓存是否缓存了该资源。有缓存直接返回资源，没缓存进入网络请求流程")]),s._v(" "),a("li",[s._v("DNS 解析 获取 IP 地址")]),s._v(" "),a("li",[s._v("建立 TCP 连接，三次握手")]),s._v(" "),a("li",[s._v("向服务器发送请求")]),s._v(" "),a("li",[s._v("服务器返回响应数据，网络进程接收并解析")]),s._v(" "),a("li",[s._v("重定向问题\n"),a("ol",[a("li",[s._v("服务器响应行的状态码包含了 301、302 一类的跳转信息，浏览器会跳转到新的地址继续导航")]),s._v(" "),a("li",[s._v("响应行是 200，那么表示浏览器可以继续处理该请求")])])]),s._v(" "),a("li",[s._v("响应数据类型处理（Content-Type）\n"),a("ol",[a("li",[s._v("Content-Type 字段的值被浏览器判断为 "),a("strong",[s._v("下载类型（如：application/octet-stream）")]),s._v("，该请求会被提交给浏览器的下载管理器，同时该 URL 请求的导航流程就此结束")]),s._v(" "),a("li",[s._v("如果是 HTML，那么浏览器则会继续进行导航流程")])])])])]),s._v(" "),a("li",[s._v("准备渲染进程\n"),a("ol",[a("li",[s._v("通常情况下，打开新的页面都会使用单独的渲染进程")]),s._v(" "),a("li",[s._v("如果从 A 页面打开 B 页面，且 A 和 B 都属于 "),a("strong",[s._v("同一站点")]),s._v(" 的话，那么 B 页面复用 A 页面的渲染进程；如果是其他情况，浏览器进程则会为 B 创建一个新的渲染进程")])])]),s._v(" "),a("li",[s._v("网络进程提交文档给渲染进程\n"),a("ol",[a("li",[s._v("文档指的是 URL 请求的响应体数据")]),s._v(" "),a("li",[s._v("浏览器进程发出提交文档的消息，渲染进程接收到提交文档的消息后，和网络进程建立传输数据的 "),a("strong",[s._v("管道")])]),s._v(" "),a("li",[s._v("等文档数据传输完成之后，渲染进程会返回 "),a("strong",[s._v("确认提交")]),s._v(" 的消息给浏览器进程")]),s._v(" "),a("li",[s._v("浏览器进程在收到确认提交的消息后，"),a("strong",[s._v("更新浏览器界面状态")]),s._v("，包括了安全状态、地址栏的 URL、前进后退的历史状态，并更新 Web 页面")])])]),s._v(" "),a("li",[s._v("随后进入渲染阶段")])]),s._v(" "),a("h3",{attrs:{id:"http-请求过程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#http-请求过程"}},[s._v("#")]),s._v(" HTTP 请求过程")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://raw.githubusercontent.com/jinle0703/img-host/master/blog/http%E8%AF%B7%E6%B1%82%E8%BF%87%E7%A8%8B.png",alt:"http请求流程图"}})]),s._v(" "),a("ol",[a("li",[s._v("浏览器构建请求行信息，准备发起网路请求")]),s._v(" "),a("li",[s._v("浏览器在缓存中查找是否有请求的文件\n"),a("ol",[a("li",[s._v("浏览器发现资源存在缓存中，则拦截请求，返回资源副本，并结束请求（"),a("strong",[s._v("缓解服务器端压力，提升性能，实现快速资源加载")]),s._v("）")]),s._v(" "),a("li",[s._v("查找失败，则进入网路请求")])])]),s._v(" "),a("li",[s._v("准备 IP 和端口\n"),a("ol",[a("li",[s._v("浏览器请求 DNS 返回域名对应的 IP（"),a("strong",[s._v("浏览器提供 DNS 数据缓存服务，可减少一次网络请求")]),s._v("）")]),s._v(" "),a("li",[s._v("获取端口号，http 默认 80 端口，https 默认 443 端口")])])]),s._v(" "),a("li",[s._v("等待 TCP 队列，Chrome 浏览器同一域名最多 6 个 TCP 连接，超出需排队等待")]),s._v(" "),a("li",[s._v("建立 TCP 连接，三次握手")]),s._v(" "),a("li",[s._v("发送 HTTP 请求，浏览器向服务器发送请求行（请求方法、请求 URI、HTTP 版本协议）和请求头")]),s._v(" "),a("li",[s._v("服务端处理 HTTP 请求后，返回响应行（协议版本、状态码）、响应头（返回数据类型、cookie 等信息）和响应体数据")]),s._v(" "),a("li",[s._v("断开连接，除非头信息中有 "),a("code",[s._v("Connection:Keep-Alive")]),s._v("，则 TCP 保持连接打开，可发送多个请求（"),a("strong",[s._v("节省连接时间，提升资源加载速度")]),s._v("）")])]),s._v(" "),a("h3",{attrs:{id:"优化资源请求"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#优化资源请求"}},[s._v("#")]),s._v(" 优化资源请求")]),s._v(" "),a("p",[s._v("关键资源 --- 能阻塞网页首次渲染的资源（HTML、CSS、JS）")]),s._v(" "),a("ol",[a("li",[s._v("减少关键资源个数\n"),a("ol",[a("li",[s._v("JS 和 CSS 改为内联形式")]),s._v(" "),a("li",[s._v("JS 改为异步引入（sync、defer）")])])]),s._v(" "),a("li",[s._v("减少关键资源大小，如压缩资源")]),s._v(" "),a("li",[s._v("减少 "),a("strong",[s._v("RTT（发送端发送数据开始，到发送端收到来自接收端的确认，总共经历的时延")]),s._v("） 次数")]),s._v(" "),a("li",[s._v("CDN 加快网络请求")])]),s._v(" "),a("h2",{attrs:{id:"渲染流程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#渲染流程"}},[s._v("#")]),s._v(" 渲染流程")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://raw.githubusercontent.com/jinle0703/img-host/master/blog/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93%E6%B5%81%E7%A8%8B%E5%9B%BE.png",alt:"渲染流程图"}})]),s._v(" "),a("ol",[a("li",[s._v("渲染进程构建 "),a("strong",[s._v("DOM 树")]),s._v(" "),a("ol",[a("li",[a("strong",[s._v("输入内容")]),s._v(" 是一个非常简单的 HTML 文件")]),s._v(" "),a("li",[s._v("经由 HTML 解析器 "),a("strong",[s._v("解析")])]),s._v(" "),a("li",[a("strong",[s._v("输出")]),s._v(" 树状结构的 DOM")])])]),s._v(" "),a("li",[s._v("渲染引擎转换 CSS 样式表为 "),a("strong",[s._v("styleSheets")]),s._v("，计算 DOM 节点样式\n"),a("ol",[a("li",[s._v("当渲染引擎接收到 CSS 文本时，会执行一个转换操作，将 CSS 文本转换为浏览器可以理解的结构 "),a("strong",[s._v("styleSheets")]),s._v("，该结构具备查询和修改功能")]),s._v(" "),a("li",[s._v("转换样式表中属性值为 "),a("strong",[s._v("渲染引擎容易理解的、标准化的计算值")])]),s._v(" "),a("li",[s._v("计算 DOM 树中每个节点的具体样式（继承规则和层叠规则）")])])]),s._v(" "),a("li",[s._v("创建 "),a("strong",[s._v("布局树")]),s._v("，计算元素的布局信息\n"),a("ol",[a("li",[s._v("创建布局树，遍历 DOM 树中的所有可见节点，并把这些节点加到布局中；不可见的节点会被布局树忽略掉")]),s._v(" "),a("li",[s._v("计算布局树节点的坐标位置")])])]),s._v(" "),a("li",[s._v("对布局树进行分层，渲染引擎生成 "),a("strong",[s._v("图层树（LayerTree）")]),s._v(" "),a("ol",[a("li",[s._v("拥有 "),a("strong",[s._v("层叠上下文属性")]),s._v(" 的元素会被提升为单独的一层（z-index、position 等）")]),s._v(" "),a("li",[s._v("需要 "),a("strong",[s._v("剪裁")]),s._v(" 的地方也会被创建为图层（如滚动条）")])])]),s._v(" "),a("li",[s._v("为每个图层生成 "),a("strong",[s._v("绘制列表")]),s._v("，并将其提交到合成线程")]),s._v(" "),a("li",[s._v("合成线程将图层分成 "),a("strong",[s._v("图块")]),s._v("，并在 "),a("strong",[s._v("光栅化线程池")]),s._v(" 中将图块转换成位图\n"),a("ol",[a("li",[s._v("合成线程会按照 "),a("strong",[s._v("视口")]),s._v(" 附近的图块来优先生成位图")]),s._v(" "),a("li",[a("strong",[s._v("栅格化")]),s._v(" 过程会使用 GPU 来加速生成，使用 GPU 生成位图的过程叫快速栅格化（GPU 进程）")])])]),s._v(" "),a("li",[s._v("合成线程发送绘制图块命令 "),a("strong",[s._v("DrawQuad")]),s._v(" 给浏览器进程")]),s._v(" "),a("li",[s._v("浏览器进程根据 DrawQuad 消息 "),a("strong",[s._v("生成页面（绘制在内存中）")]),s._v("，"),a("strong",[s._v("显示")]),s._v(" 页面")])]),s._v(" "),a("h3",{attrs:{id:"生成-dom-树"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#生成-dom-树"}},[s._v("#")]),s._v(" 生成 DOM 树")]),s._v(" "),a("p",[s._v("在渲染引擎内部，有一个叫 **HTML 解析器（HTMLParser）**的模块，它的职责就是负责将 HTML 字节流转换为 DOM 结构")]),s._v(" "),a("p",[a("strong",[s._v("HTML 解析器随着网络进程加载多少数据，就解析多少数据")])]),s._v(" "),a("p",[s._v("生成 DOM 树流程：")]),s._v(" "),a("ol",[a("li",[s._v("通过分词器将网络进程传输过来的字节流转为 Token\n"),a("ol",[a("li",[s._v("分为 Tag Token（StartTag、EndTag）和文本 Token")])])]),s._v(" "),a("li",[s._v("将 Token 解析为 DOM 节点，并将 DOM 节点添加到 DOM 树中\n"),a("ol",[a("li",[s._v("HTML 解析器维护一个 "),a("strong",[s._v("Token 栈")])]),s._v(" "),a("li",[s._v("如果分词器解析出来的是 "),a("strong",[s._v("StartTag Token")]),s._v("，则压入栈，解析器为 Token 创建一个 DOM 节点，然后将该节点加入到 DOM 树中，它的父节点就是栈中相邻的那个元素生成的节点")]),s._v(" "),a("li",[s._v("如果分词器解析出来是 "),a("strong",[s._v("文本 Token")]),s._v("，那么会生成一个文本节点，然后将该节点加入到 DOM 树中，文本 Token 是不需要压入到栈中，它的父节点就是当前栈顶 Token 所对应的 DOM 节点")]),s._v(" "),a("li",[s._v("如果分词器解析出来的是 "),a("strong",[s._v("EndTag 标签")]),s._v("，比如是 EndTag div，HTML 解析器会查看 Token 栈顶的元素是否是 StarTag div，如果是，就将 StartTag div 从栈中弹出，表示该 div 元素解析完成")])])])]),s._v(" "),a("blockquote",[a("p",[s._v("遇到 JavaScript 代码会暂停 DOM 解析，先执行代码")]),s._v(" "),a("p",[s._v("如果遇到需要下载的 JS 或 CSS 代码，浏览器会开启一个 "),a("strong",[s._v("预解析")]),s._v(" 线程提前下载这些文件")])]),s._v(" "),a("h3",{attrs:{id:"渲染机制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#渲染机制"}},[s._v("#")]),s._v(" 渲染机制")]),s._v(" "),a("h4",{attrs:{id:"重排"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#重排"}},[s._v("#")]),s._v(" 重排")]),s._v(" "),a("p",[s._v("通过 JavaScript 或者 CSS 修改元素的几何位置属性，例如改变元素的宽度、高度等，那么浏览器会触发重新布局，解析之后的一系列子阶段，这个过程就叫 "),a("strong",[s._v("重排")])]),s._v(" "),a("p",[a("strong",[s._v("重排需要更新完整的渲染流水线，所以开销也是最大的")])]),s._v(" "),a("ul",[a("li",[s._v("改变 DOM 树结构")]),s._v(" "),a("li",[s._v("获取一些特定的值（offsetTop、offsetLeft、 offsetWidth、offsetHeight、scrollTop、scrollLeft、scrollWidth、scrollHeight、clientTop、clientLeft、clientWidth、clientHeight）")])]),s._v(" "),a("h4",{attrs:{id:"重绘"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#重绘"}},[s._v("#")]),s._v(" 重绘")]),s._v(" "),a("p",[s._v("修改了元素的背景颜色，布局阶段将不会被执行，因为并没有引起几何位置的变换，所以就直接进入了绘制阶段，然后执行之后的一系列子阶段，这个过程就叫 "),a("strong",[s._v("重绘")])]),s._v(" "),a("p",[a("strong",[s._v("重绘省去了布局和分层阶段，所以执行效率会比重排操作要高一些")])]),s._v(" "),a("p",[a("strong",[s._v("重排一定会重绘，重绘不一定重排")])]),s._v(" "),a("h4",{attrs:{id:"合成"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#合成"}},[s._v("#")]),s._v(" 合成")]),s._v(" "),a("p",[s._v("渲染引擎将跳过布局和绘制，只执行后续的合成操作，我们把这个过程叫做 "),a("strong",[s._v("合成")])]),s._v(" "),a("p",[a("strong",[s._v("合成操作是在合成线程上完成的，这也就意味着在执行合成操作时，是不会影响到主线程执行的")])]),s._v(" "),a("p",[a("strong",[s._v("相对于重绘和重排，合成能大大提升绘制效率")])]),s._v(" "),a("p",[s._v("合成主要分为："),a("strong",[s._v("分层")]),s._v("、"),a("strong",[s._v("分块")]),s._v("、"),a("strong",[s._v("合成")]),s._v(" 三步")]),s._v(" "),a("p",[s._v("分层流程：")]),s._v(" "),a("ol",[a("li",[s._v("分层体现在生成布局树之后，渲染引擎会根据布局树的特点将其转换为 "),a("strong",[s._v("层树")]),s._v("（渲染流水线后续流程的基础结构）")]),s._v(" "),a("li",[s._v("根据层树节点生成绘制指令，组合成一个绘制指令列表")]),s._v(" "),a("li",[s._v("光栅化，按照绘制列表中的指令生成图片")]),s._v(" "),a("li",[s._v("合成线程合成图片发送到后缓冲区")])]),s._v(" "),a("p",[s._v("在分层基础上优化可 "),a("strong",[s._v("在 CSS 中使用 "),a("code",[s._v("will-change")]),s._v(" 属性")]),s._v(" 来告诉渲染引擎元素将做的变换操作，从而"),a("strong",[s._v("提升渲染效率")])]),s._v(" "),a("p",[s._v("分块技术则是采用 "),a("strong",[s._v("在首次合成图块的时候使用一个低分辨率的图片")]),s._v(" 的策略")]),s._v(" "),a("h4",{attrs:{id:"window-onload-domcontentloaded"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#window-onload-domcontentloaded"}},[s._v("#")]),s._v(" window.onload/DOMContentLoaded")]),s._v(" "),a("p",[a("code",[s._v("window.onload")]),s._v("：资源全部加载完成才能执行，包括图片")]),s._v(" "),a("p",[a("code",[s._v("DOMContentLoaded")]),s._v("：DOM 渲染完成即可，图片可能尚未下载")]),s._v(" "),a("h3",{attrs:{id:"优化渲染"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#优化渲染"}},[s._v("#")]),s._v(" 优化渲染")]),s._v(" "),a("ol",[a("li",[s._v("减少 JS 脚本执行时间\n"),a("ol",[a("li",[s._v("将一次执行的函数分解为多个任务，使得每次的执行时间不要过久")]),s._v(" "),a("li",[s._v("采用 Web Workers（只能执行和 DOM 无关且耗时的操作）")])])]),s._v(" "),a("li",[s._v("避免 "),a("strong",[s._v("强制同步（强制将计算样式和布局操作提前到当前的任务中）")])]),s._v(" "),a("li",[s._v("避免 "),a("strong",[s._v("布局抖动（多次执行强制布局和抖动操作）")])]),s._v(" "),a("li",[s._v("合理利用 CSS 合成动画（will-change）")]),s._v(" "),a("li",[s._v("避免频繁垃圾回收")])]),s._v(" "),a("h2",{attrs:{id:"事件循环"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#事件循环"}},[s._v("#")]),s._v(" 事件循环")]),s._v(" "),a("ul",[a("li",[a("strong",[s._v("函数调用栈")]),s._v(" --- 当引擎第一次遇到 JS 代码时，会产生一个全局执行上下文并压入调用栈，后面每遇到一个函数调用，就会往栈中压入一个新的函数上下文，JS引擎会执行栈顶的函数，执行完毕后，弹出对应的上下文")]),s._v(" "),a("li",[a("strong",[s._v("宏任务")]),s._v(" --- setTimeout、setInterval、 setImmediate、 script（整体代码）、I/O 操作等，DOM 渲染后再触发")]),s._v(" "),a("li",[a("strong",[s._v("微任务")]),s._v(" --- process.nextTick、Promise、MutationObserver 等，DOM 渲染前会触发")])]),s._v(" "),a("h3",{attrs:{id:"event-loop-机制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#event-loop-机制"}},[s._v("#")]),s._v(" Event-Loop 机制")]),s._v(" "),a("ol",[a("li",[s._v("执行并出队一个 "),a("strong",[s._v("宏任务")]),s._v("。注意如果是初始状态：调用栈空、微任务队列空，宏任务队列里有且只有一个 script 脚本（整体代码）。这时首先执行并出队的就是 script 脚本")]),s._v(" "),a("li",[s._v("全局上下文（script 标签）被推入调用栈，同步代码执行。在执行的过程中，通过对一些接口的调用，"),a("strong",[s._v("可以产生新的宏任务和微任务，它们会分别被推入各自的任务队列里，这个过程本质上是队列的宏任务的执行和出队的过程")])]),s._v(" "),a("li",[s._v("上一步我们出队的是一个 "),a("strong",[s._v("宏任务")]),s._v("，这一步我们处理的是 "),a("strong",[s._v("微任务")]),s._v("。但需要注意的是：当宏任务出队时，任务是 "),a("strong",[s._v("一个一个")]),s._v(" 执行的；而微任务出队时，任务是 "),a("strong",[s._v("一队一队")]),s._v(" 执行的（如下图所示）。因此，"),a("strong",[s._v("我们处理微任务队列这一步，会逐个执行队列中的任务并把它出队，直到队列被清空")])]),s._v(" "),a("li",[s._v("执行 DOM 渲染操作，更新界面")]),s._v(" "),a("li",[s._v("检查是否存在 Web worker 任务，如果有，则对其进行处理")])]),s._v(" "),a("h3",{attrs:{id:"for-of"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#for-of"}},[s._v("#")]),s._v(" for...of")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 定时算乘法")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("multi")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("num")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Promise")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("resolve")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=>")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("setTimeout")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=>")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("resolve")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("num "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" num"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1000")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 使用 for...of ，可以让计算挨个串行执行")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("async")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("test2")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" nums "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" x "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("of")]),s._v(" nums"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 在 for...of 循环体的内部，遇到 await 会挨个串行计算")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" res "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("await")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("multi")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n        console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("res"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("test2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br")])]),a("h3",{attrs:{id:"执行顺序"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#执行顺序"}},[s._v("#")]),s._v(" 执行顺序")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("async")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("async1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'async1 start'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 2")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 这一句会同步执行，返回 Promise ，其中的 `console.log('async2')` 也会同步执行")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("await")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("async2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" \n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 上面有 await ，下面就变成了“异步”，类似 cakkback 的功能（微任务）")]),s._v("\n  console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'async1 end'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 6 ")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("async")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("async2")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'async2'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 3")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'script start'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 1")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("setTimeout")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 异步，宏任务")]),s._v("\n  console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'setTimeout'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 8")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("async1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 返回 Promise 之后，即同步执行完成，then 是异步代码")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Promise")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("resolve")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" \n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// Promise 的函数体会立刻执行")]),s._v("\n  console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'promise1'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 4")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("resolve")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("then")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 异步，微任务")]),s._v("\n  console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'promise2'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 7")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'script end'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 5")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 同步代码执行完之后，屡一下现有的异步未执行的，按照顺序")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 1. async1 函数中 await 后面的内容 —— 微任务")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 2. setTimeout —— 宏任务")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 3. then —— 微任务")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br")])]),a("h2",{attrs:{id:"缓存机制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#缓存机制"}},[s._v("#")]),s._v(" 缓存机制")]),s._v(" "),a("p",[s._v("浏览器的缓存机制也就是 HTTP 缓存机制，其机制是根据 HTTP 报文的缓存标识进行的")]),s._v(" "),a("p",[a("strong",[s._v("当浏览器向服务器发起请求时，服务器会将缓存规则放入 HTTP 响应报文的HTTP 头中和请求结果一起返回给浏览器")])]),s._v(" "),a("p",[s._v("浏览器第一次向服务器发起该请求后拿到请求结果，会根据响应报文中 HTTP 头的缓存标识，决定是否缓存结果，是则将请求结果和缓存标识存入浏览器缓存中")]),s._v(" "),a("ul",[a("li",[s._v("浏览器每次发起请求，都会先在浏览器缓存中查找该请求的结果以及缓存标识")]),s._v(" "),a("li",[s._v("浏览器每次拿到返回的请求结果都会将该结果和缓存标识存入浏览器缓存中")])]),s._v(" "),a("h3",{attrs:{id:"缓存存放位置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#缓存存放位置"}},[s._v("#")]),s._v(" 缓存存放位置")]),s._v(" "),a("p",[s._v("缓存请求对应的 Size 值代表缓存存放的位置，分别为 "),a("strong",[s._v("from memory cache")]),s._v(" 和 "),a("strong",[s._v("from disk cache")])]),s._v(" "),a("p",[s._v("from memory cache 代表使用内存中的缓存，from disk cache 则代表使用的是硬盘中的缓存")]),s._v(" "),a("p",[s._v("浏览器读取缓存的顺序为 "),a("strong",[s._v("memory –> disk")])]),s._v(" "),a("ul",[a("li",[a("strong",[s._v("内存缓存（from memory cache）")]),s._v(" --- 内存缓存具有两个特点，分别是 "),a("strong",[s._v("快速读取")]),s._v(" 和 "),a("strong",[s._v("时效性")]),s._v(" "),a("ul",[a("li",[s._v("快速读取 --- 内存缓存会将编译解析后的文件，直接存入该进程的内存中，占据该进程一定的内存资源，以方便下次运行使用时的快速读取")]),s._v(" "),a("li",[s._v("时效性 --- 一旦该进程关闭，则该进程的内存则会清空")])])]),s._v(" "),a("li",[a("strong",[s._v("硬盘缓存（from disk cache）")]),s._v(" --- 硬盘缓存则是直接将缓存写入硬盘文件中，读取缓存需要对该缓存存放的硬盘文件进行 I/O 操作，然后重新解析该缓存内容，读取复杂，速度比内存缓存慢")])]),s._v(" "),a("h3",{attrs:{id:"强制缓存"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#强制缓存"}},[s._v("#")]),s._v(" 强制缓存")]),s._v(" "),a("p",[s._v("强制缓存就是向浏览器缓存查找该请求结果，并根据该结果的缓存规则来决定是否使用该缓存结果的过程，其有三种结果：")]),s._v(" "),a("ol",[a("li",[s._v("不存在该缓存结果和缓存标识，强制缓存失效，则直接向服务器发起请求（跟第一次发起请求一致）")]),s._v(" "),a("li",[s._v("存在该缓存结果和缓存标识，但该结果已失效，强制缓存失效，则使用协商缓存")]),s._v(" "),a("li",[s._v("存在该缓存结果和缓存标识，且该结果尚未失效，强制缓存生效，直接返回该结果")])]),s._v(" "),a("p",[s._v("控制强制缓存的 HTTP 字段分别是 "),a("strong",[s._v("Expires")]),s._v(" 和 "),a("strong",[s._v("Cache-Control")])]),s._v(" "),a("h4",{attrs:{id:"expires"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#expires"}},[s._v("#")]),s._v(" Expires")]),s._v(" "),a("p",[s._v("Expires 是 HTTP/1.0 控制网页缓存的字段，其值为服务器 "),a("strong",[s._v("返回该请求结果缓存的到期时间")]),s._v("，即再次发起该请求时，如果 "),a("strong",[s._v("客户端的时间小于 Expires 的值时，直接使用缓存结果")])]),s._v(" "),a("p",[s._v("但如果客户端和服务端的时间发生误差，会导致缓存失效，所以 "),a("strong",[s._v("Cache-Control")]),s._v(" 已经在 1.1 版本完全替代它")]),s._v(" "),a("h4",{attrs:{id:"cache-control"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cache-control"}},[s._v("#")]),s._v(" Cache-Control")]),s._v(" "),a("p",[s._v("其取值：")]),s._v(" "),a("ul",[a("li",[a("code",[s._v("public")]),s._v(" --- 所有内容都将被缓存（客户端和代理服务器都可缓存）")]),s._v(" "),a("li",[a("code",[s._v("private")]),s._v(" --- 所有内容只有客户端可以缓存（默认值）")]),s._v(" "),a("li",[a("code",[s._v("no-cache")]),s._v(" --- 客户端缓存内容，但是是否使用缓存则需要经过协商缓存来验证决定")]),s._v(" "),a("li",[a("code",[s._v("no-store")]),s._v(" --- 所有内容都不会被缓存，即不使用强制缓存，也不使用协商缓存")]),s._v(" "),a("li",[a("code",[s._v("max-age=xxx (xxx is numeric)")]),s._v(" --- 缓存内容将在 xxx 秒后失效")])]),s._v(" "),a("p",[s._v("在无法确定客户端的时间是否与服务端的时间同步的情况下，Cache-Control 相比于 expires 是更好的选择，"),a("strong",[s._v("所以同时存在时，只有 Cache-Control 生效")])]),s._v(" "),a("h3",{attrs:{id:"协商缓存"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#协商缓存"}},[s._v("#")]),s._v(" 协商缓存")]),s._v(" "),a("p",[s._v("协商缓存就是强制缓存失效后，浏览器携带缓存标识向服务器发起请求，由服务器根据缓存标识决定是否使用缓存的过程，其有两种结果：")]),s._v(" "),a("ol",[a("li",[s._v("协商缓存生效，返回 304")]),s._v(" "),a("li",[s._v("协商缓存失效，返回 200 和请求结果结果")])]),s._v(" "),a("p",[s._v("控制协商缓存的 HTTP 字段分别是 "),a("strong",[s._v("Last-Modified / If-Modified-Since")]),s._v(" 和 "),a("strong",[s._v("Etag / If-None-Match")])]),s._v(" "),a("h4",{attrs:{id:"last-modified-if-modified-since"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#last-modified-if-modified-since"}},[s._v("#")]),s._v(" Last-Modified / If-Modified-Since")]),s._v(" "),a("p",[s._v("Last-Modified 是服务器响应请求时，返回 "),a("strong",[s._v("该资源文件在服务器最后被修改的时间")])]),s._v(" "),a("p",[s._v("If-Modified-Since 则是客户端再次发起该请求时，"),a("strong",[s._v("携带上次请求返回的 Last-Modified 值")]),s._v("，通过此字段值 "),a("strong",[s._v("告诉服务器该资源上次请求返回的最后被修改时间")])]),s._v(" "),a("p",[s._v("服务器收到该请求，发现请求头含有 If-Modified-Since 字段，则会根据 If-Modified-Since 的字段值与该资源在服务器的最后被修改时间做对比")]),s._v(" "),a("ol",[a("li",[s._v("若服务器的资源最后被修改时间 "),a("strong",[s._v("大于")]),s._v(" If-Modified-Since 的字段值，则重新返回资源，状态码为 200")]),s._v(" "),a("li",[s._v("否则则返回 304，代表资源无更新，可继续使用缓存文件")])]),s._v(" "),a("h4",{attrs:{id:"etag-if-none-match"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#etag-if-none-match"}},[s._v("#")]),s._v(" Etag / If-None-Match")]),s._v(" "),a("p",[s._v("Etag 是服务器响应请求时，返回 "),a("strong",[s._v("当前资源文件的一个唯一标识（由服务器生成）")])]),s._v(" "),a("p",[s._v("If-None-Match 是客户端再次发起该请求时，"),a("strong",[s._v("携带上次请求返回的唯一标识 Etag 值")]),s._v("，通过此字段值 "),a("strong",[s._v("告诉服务器该资源上次请求返回的唯一标识值")])]),s._v(" "),a("p",[s._v("服务器收到该请求后，发现该请求头中含有 If-None-Match，则会根据 If-None-Match 的字段值与该资源在服务器的 Etag 值做对比")]),s._v(" "),a("ol",[a("li",[s._v("一致则返回 304，代表资源无更新，继续使用缓存文件")]),s._v(" "),a("li",[s._v("不一致则重新返回资源文件，状态码为 200")])]),s._v(" "),a("h3",{attrs:{id:"总体过程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#总体过程"}},[s._v("#")]),s._v(" 总体过程")]),s._v(" "),a("ol",[a("li",[a("p",[s._v("先判断浏览器有没有缓存，若没缓存则向服务器请求资源")])]),s._v(" "),a("li",[a("p",[s._v("若有缓存，根据 "),a("code",[s._v("Cache-Control: max-age")]),s._v(" 或是 "),a("code",[s._v("Expires")]),s._v(" 判断资源是否过期")]),s._v(" "),a("ol",[a("li",[a("p",[s._v("如果资源没过期，则直接从缓存读取（强制缓存），此时在 Network 一栏可以看到资源对应的状态码为 "),a("strong",[s._v("200（from disk cache）或者是 200 （from memory cache）")])])]),s._v(" "),a("li",[a("p",[a("code",[s._v("Cache-Control")]),s._v(" 优先级高于 "),a("code",[s._v("Expires")])])]),s._v(" "),a("li",[a("p",[s._v("如果资源过期了")]),s._v(" "),a("ol",[a("li",[a("p",[s._v("查看上次资源的响应是否有 "),a("code",[s._v("Etag")]),s._v(" 头部， 有的话发送请求，请求头为 "),a("code",[s._v("If-None-Match")])])]),s._v(" "),a("li",[a("p",[s._v("没有 "),a("code",[s._v("Etag")]),s._v(" 的话，看上次资源的响应是否有 "),a("code",[s._v("Last-Modified")]),s._v("，有的话发送请求，请求头为 "),a("code",[s._v("If-Modified-Since")])])]),s._v(" "),a("li",[a("p",[s._v("如果命中了缓存，或者说资源没有发生改变，服务器会发送状态码为 **304（Not Modify）**的响应，告诉浏览器读取缓存中的资源")]),s._v(" "),a("p",[s._v("如果未命中缓存，或者说资源发生了改变，服务器会发送状态码为 **200（OK）**的响应，并把资源作为响应的内容发送给浏览器")])])])])])])]),s._v(" "),a("p",[a("img",{attrs:{src:"https://raw.githubusercontent.com/jinle0703/img-host/master/blog/%E6%B5%8F%E8%A7%88%E5%99%A8%E8%AF%B7%E6%B1%82%E7%BC%93%E5%AD%98%E8%B5%84%E6%BA%90",alt:""}})]),s._v(" "),a("h2",{attrs:{id:"客户端存储"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#客户端存储"}},[s._v("#")]),s._v(" 客户端存储")]),s._v(" "),a("p",[s._v("cookie 和 session 都是用来跟踪浏览器用户身份的会话方式。")]),s._v(" "),a("p",[s._v("WebStorage 的目的是克服由 cookie 所带来的一些限制，当数据需要被严格控制在客户端时，不需要持续的将数据发回服务器。")]),s._v(" "),a("p",[s._v("WebStorage 提供了两种 API：localStorage（本地存储）和 sessionStorage（会话存储）。")]),s._v(" "),a("h3",{attrs:{id:"cookie"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cookie"}},[s._v("#")]),s._v(" cookie")]),s._v(" "),a("p",[s._v("由服务器生成，保存在客户端。")]),s._v(" "),a("p",[s._v("可设置过期时间，如果不设置将保存在内存中，浏览器关闭就结束，如果设置过期时间，则保存在硬盘中。")]),s._v(" "),a("p",[s._v("浏览器每次请求都会带上 cookie。")]),s._v(" "),a("p",[s._v("存储大小单个 cookie 不超过 4kb。")]),s._v(" "),a("p",[s._v("一般用于存储用于判断用户是否登录的 sessionid 。")]),s._v(" "),a("h3",{attrs:{id:"session"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#session"}},[s._v("#")]),s._v(" session")]),s._v(" "),a("p",[s._v("由服务器生成，保存在服务器端。")]),s._v(" "),a("p",[s._v("当服务器收到请求需要创建 session 对象时，首先会检查客户端请求中是否包含 sessionid。如果有 sessionid，服务器将根据该 id 返回对应 session 对象。如果客户端请求中没有 sessionid，服务器会创建新的 session 对象，并把 sessionid 在本次响应中返回给客户端。通常使用 cookie 方式存储 sessionid 到客户端，在交互中浏览器按照规则将 sessionid 发送给服务器。")]),s._v(" "),a("p",[s._v("session 的安全性大于 cookie。")]),s._v(" "),a("p",[s._v("一般用于保存用户登录信息。")]),s._v(" "),a("h3",{attrs:{id:"localstorage"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#localstorage"}},[s._v("#")]),s._v(" localStorage")]),s._v(" "),a("p",[s._v("由客户端生成，保存在客户端。")]),s._v(" "),a("p",[s._v("localStorage 的生命周期是永久的，关闭页面或浏览器之后 localStorage 中的数据也不会消失。localStorage 除非主动删除数据，否则数据永远不会消失。")]),s._v(" "),a("p",[s._v("localStorage 的存储大小一般是 5MB。")]),s._v(" "),a("p",[s._v("常用于长期登录（判断用户是否已登录），适合长期保存在本地的数据。")]),s._v(" "),a("h3",{attrs:{id:"sessionstorage"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sessionstorage"}},[s._v("#")]),s._v(" sessionStorage")]),s._v(" "),a("p",[s._v("由客户端生成，保存在客户端。")]),s._v(" "),a("p",[s._v("sessionStorage 的生命周期是在仅在当前会话下有效。sessionStorage 引入了一个浏览器窗口的概念，sessionStorage 是在同源的窗口中始终存在的数据。只要这个浏览器窗口没有关闭，即使刷新页面或者进入同源另一个页面，数据依然存在。但是 sessionStorage 在关闭了浏览器窗口后就会被销毁。同时独立的打开同一个窗口同一个页面，sessionStorage 也是不一样的。")]),s._v(" "),a("p",[s._v("sessionStorage 的存储大小一般是 5MB。")]),s._v(" "),a("p",[s._v("常用于敏感账号一次性登录。")])])}),[],!1,null,null,null);t.default=v.exports}}]);